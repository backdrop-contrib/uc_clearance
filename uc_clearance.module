<?php
/**
 * @file
 * Main file for the Clearance module.
 */

/**
 * Implements hook_menu().
 */
function uc_clearance_menu() {

  $items['admin/store/settings/clearance'] = array(
    'title' => 'Clearance',
    'description' => 'Configure clearance product behavior.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('uc_clearance_settings_form'),
    'file' => 'uc_clearance.admin.inc',
    'access arguments' => array('administer catalog'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for uc_product_add_to_cart_form().
 *
 * For clearance products, on the product page display a message about remaining
 * stock and if we're out of stock, remove the "Add to cart" button.
 *
 */
function uc_clearance_form_uc_product_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  $node = node_load($form['nid']['#value']);
  if (_uc_clearance_is_clearance($node)) {
    $stock_info = _uc_clearance_stock_info($node);
    if (isset($stock_info)) {
      $form['clearance'] = array(
        '#markup' => '',
        '#attributes' => array('class' => 'clearance'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      );
      if ($stock_info['total'] <= 0) {
        // sold out
        $form['clearance']['#markup'] = '<b>' . t('Sold out and discontinued') . '</b>';
        unset($form['actions']['submit']);
      }
      else {
        // some stock remaining
        $form['clearance']['#markup'] = '<b>' . t('CLEARANCE') . '</b> &mdash; ' .
          t("Orders will be accepted until product is gone. Please don't order more than the quantity remaining, which is: !qty", array('!qty' => $stock_info['avail']));
      }
    }
    else {
      // $stock_info was empty, so no stock active, so return with no mods
      return;
    }
  }
  else {
    // product wasn't clearance, so no changes
    return;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for uc_catalog_buy_it_now_form().
 *
 * For clearance products that are out of stock, remove the "Add to cart" button.
 */
function uc_clearance_form_uc_catalog_buy_it_now_form_alter(&$form, &$form_state, $form_id) {
  $node = node_load($form['nid']['#value']);
  if (_uc_clearance_is_clearance($node)) {
    $stock_info = _uc_clearance_stock_info($node);
    if (isset($stock_info) && ($stock_info['total'] <= 0)) {
      $form['clearance'] = array(
        '#markup' => t('Sold out'),
        '#attributes' => array('class' => 'clearance'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
      );
      unset($form['actions']['submit']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 *
 * Add a validation handler to the cart checkout form to check for sold-out
 * clearance products.
 *
 * @see uc_clearance_cart_checkout_form_validate()
 */
function uc_clearance_form_uc_cart_checkout_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'uc_clearance_cart_checkout_form_validate';
}

/**
 * Additional validation for uc_cart_checkout_form().
 *
 * Check for sold-out clearance products that managed to make it into the cart.
 *
 * @see uc_clearance_form_uc_cart_checkout_form_alter()
 */
function uc_clearance_cart_checkout_form_validate($form, &$form_state) {
  $order = $form_state['storage']['order'];

  // Check product stock levels on clearance items and reject order if stock
  // would go negative
  foreach ($order->products as $product) {
    if (_uc_clearance_is_clearance($product)) {
      $stock_level = uc_stock_level($product->model);
      if ($product->qty > $stock_level) {
        // order qty exceeds stock level; generate an error message entry.
        $descriptor = $product->title;
        $option_name = _uc_clearance_lookup_option_name($product->model);
        if ($option_name) {
          $descriptor .= ' (' . $option_name . ')';
        }
        $errors[] = array(
          '@descriptor' => $descriptor,
          '!qty' => $product->qty,
          '!stock_level' => $stock_level,
        );
      }
    }
  }

  // if there were any errors, fail the validation
  if (isset($errors)) {
    $message = t('Sorry, you ordered more of a clearance product than the current availability:') . '<ul>' . "\n";
    foreach ($errors as $error) {
      $message .= '<li>' . t('For @descriptor you ordered !qty but there are only !stock_level available', $error) . '</li>' . "\n";
    }
    $message .= '</ul>. ' . t('Please click the "Cancel" button to go back to your cart and adjust the quantities in your order.');
    form_set_error('cart', $message);
  }
}

/**
 * Implements hook_config_info().
 */
function uc_clearance_config_info() {
  $prefixes['uc_clearance.settings'] = array(
    'label' => t('Clearance settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_uc_store_status().
 */
function uc_clearance_uc_store_status() {
  $message = array();
  $clearance_tid = config_get('uc_clearance.settings', 'uc_clearance_tid');
  if ($clearance_tid) {
    $term = taxonomy_term_load($clearance_tid);
    $message[] = array(
      'status' => 'ok',
      'title' => t('Clearance'),
      'desc' => t('The clearance catalog term is %name.', array('%name' => $term->name)),
    );
  }
  else {
    $message[] = array(
      'status' => 'warning',
      'title' => t('Clearance'),
      'desc' => t('The Ubercart Clearance module is enabled but you have not selected a clearance catalog term. !link', array('!link' => l(t('Select the clearance catalog term.'), 'admin/store/settings/clearance'))),
    );
  }

  return $message;
}

/**
 * Returns all stock information for a given product (could be multiple SKUs).
 *
 * @param $node
 *  A fully loaded product node.
 * @return array
 *  An array containing string and numerical description of stock levels, text
 *  and numeric, or null if stock isn't being tracked.
 */
function _uc_clearance_stock_info($node) {
  $stock_info = NULL;
  $skus = array();
  $adjustments = db_query('
    SELECT model
    FROM {uc_product_adjustments}
    WHERE nid = :nid', array(':nid' => $node->nid));
  foreach ($adjustments as $adjustment) {
    if (!in_array($adjustment->model, $skus)) {
      $skus[] = $adjustment->model;
    }
  }
  if (!empty($skus)) {
    // if there are multiple SKUs, then list stock availability of all options.
    $avail = array();
    $cum_stock_level = 0;
    foreach ($skus as $sku) {
      $stock_level = uc_stock_level($sku);
      if (is_numeric($stock_level)) {
        $name = _uc_clearance_lookup_option_name($sku);
        $avail[] =  " " . $name . " (" . $stock_level . ")";
        if ($stock_level > 0) {
          $cum_stock_level += $stock_level; // don't accumulate negative stock
        }
      }
    }
    $stock_info['avail'] = implode(",", $avail);
    $stock_info['total'] = (integer) $cum_stock_level;
  }
  else { // no options on this product
    $stockactive = uc_stock_level($node->model);
    if (is_numeric($stockactive)) { //stock active
      $stock_info['avail'] = (string) $stockactive;
      $stock_info['total'] = (integer) $stockactive;
    }
  }
  // note, if stock tracking wasn't active, return will be null (not even an array)
  return $stock_info;
}

/**
 * Returns whether the product node is a Clearance item.
 *
 * @param $node
 *  A fully loaded product node.
 * @return boolean
 *  TRUE if clearance, FALSE otherwise
 **/
function _uc_clearance_is_clearance($node) {
  $clearance_tid = config_get('uc_clearance.settings', 'uc_clearance_tid');
  if ($clearance_tid && isset($node->taxonomy_catalog['und'])) {
    foreach ($node->taxonomy_catalog['und'] as $elem) {
      if ($elem['tid'] == $clearance_tid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Checks if a product is clearance with zero stock and if so, unpublish it.
 */
function _uc_clearance_check_clearance($product) {
  $node = node_load($product->nid);
  if (_uc_clearance_is_clearance($node)) {
    $stock_info = _uc_clearance_stock_info($node);
    if ($stock_info['total'] === 0) {
      // total is 0 but not null, so unpublish the product Now, the following
      // two lines are the Backdrop-friendly way of doing this, but there's a
      // bad side effect. Unpublishing a product that is part of a product kit
      // causes the product kit pricing to recalculate, and if there is a
      // special role price in effect for the current user (via
      // uc_price_per_role), the product kit pricing is done incorrectly.

      //$node->status = 0;
      //node_save($node);

      // So, instead of the above, we'll reach into the db and set the status
      // flag directly, thereby bypassing all of the Backdrop hook_update()
      // calls that might have gotten triggered. Which is not very nice,
      // Backdrop-wise, but at least it doesn't screw up the product pricing.
      db_update('node')
        ->fields(array(
        'status' => 0,
      ))
        ->condition('nid', $product->nid)
        ->execute();
      db_update('node_revision')
        ->fields(array(
        'status' => 0,
      ))
        ->condition('nid', $product->nid)
        ->execute();

      watchdog('uc_clearance', 'Unpublished clearance product %name',
        array('%name' => $node->title));
    }
  }
}

/**
 * Returns the option id, if any, of an option from its SKU
 */
function _uc_clearance_lookup_option_id($sku) {
  $combination = db_query('
    SELECT combination
    FROM {uc_product_adjustments}
    WHERE model = :sku
    ', array(':sku' => $sku))
    ->fetchField();
  if ($combination) {
    $combination = unserialize($combination);
    foreach ($combination as $aid => $oid) {
      return $oid;
    }
  }
}

/**
 * Returns the name of an option, if any, from its SKU
 */
function _uc_clearance_lookup_option_name($sku) {
  $oid = _uc_clearance_lookup_option_id($sku);
  if ($oid) {
    $name = db_query('
      SELECT name
      FROM {uc_attribute_options}
      WHERE oid = :oid
      ', array(':oid' => $oid))
      ->fetchField();
    return $name;
  }
}
